// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StephenKingFanSite.Data;

namespace StephenKingFanSite.Migrations
{
    [DbContext(typeof(KingContext))]
    [Migration("20201115181718_Rating")]
    partial class Rating
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("StephenKingFanSite.Models.Forum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Forum");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Movie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenresID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PremiereDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GenresID");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Novel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenresID")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PulicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GenresID");

                    b.ToTable("Novel");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Score", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HighScore")
                        .HasColumnType("int");

                    b.Property<string>("Ranking")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Score");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ForumID")
                        .HasColumnType("int");

                    b.Property<int?>("MovieID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NovelID")
                        .HasColumnType("int");

                    b.Property<int?>("ScoreID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ForumID");

                    b.HasIndex("MovieID");

                    b.HasIndex("NovelID");

                    b.HasIndex("ScoreID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Movie", b =>
                {
                    b.HasOne("StephenKingFanSite.Models.Genre", "Genres")
                        .WithMany()
                        .HasForeignKey("GenresID");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Novel", b =>
                {
                    b.HasOne("StephenKingFanSite.Models.Genre", "Genres")
                        .WithMany()
                        .HasForeignKey("GenresID");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.User", b =>
                {
                    b.HasOne("StephenKingFanSite.Models.Forum", null)
                        .WithMany("Users")
                        .HasForeignKey("ForumID");

                    b.HasOne("StephenKingFanSite.Models.Movie", null)
                        .WithMany("Users")
                        .HasForeignKey("MovieID");

                    b.HasOne("StephenKingFanSite.Models.Novel", null)
                        .WithMany("Users")
                        .HasForeignKey("NovelID");

                    b.HasOne("StephenKingFanSite.Models.Score", null)
                        .WithMany("Users")
                        .HasForeignKey("ScoreID");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Forum", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Movie", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Novel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("StephenKingFanSite.Models.Score", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
